rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      
      match /notifications/{notificationId} {
        allow read, update, delete: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null; // Allow any authenticated user to create a notification for another user
      }
      
      match /savedIssues/{issueId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    match /admins/{adminId} {
      allow read, write: if isSuperAdmin();
    }
    
    match /districtAdmins/{districtId} {
       allow read, write: if false; // Should be managed by superadmin
    }

    match /anonymousIssues/{issueId} {
      allow read: if true;
      allow create: if true;
      allow update: if request.auth != null; // Allow updates for votes
      allow delete: if false;
      
      match /votes/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    match /profiledIssues/{issueId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null; // Allow updates for votes and status changes
      allow delete: if request.auth != null && resource.data.reporterId == request.auth.uid;

      match /votes/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // This allows admins to update issues
    match /issues/{issueId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && isAdmin();
    }

    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.status == 'approved';
    }

    function isSuperAdmin() {
      // Replace with your actual super admin UID logic
      // This is an example and should be secured appropriately
      return request.auth != null && request.auth.uid == "SUPER_ADMIN_UID";
    }
  }
}
