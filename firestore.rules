
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Superadmin has full access to admins collection
    // Regular admins can read their own data
    // New admins can be created if the district is not already taken
    match /admins/{userId} {
      allow read: if request.auth.uid == userId || get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'superadmin';
      allow list: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'superadmin';
      allow create: if request.auth != null && !exists(/databases/$(database)/documents/districtAdmins/$(request.resource.data.district));
      allow update: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'superadmin';
      allow delete: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'superadmin';
    }

    // This collection ensures that each district is assigned to at most one admin.
    // The document ID is the district ID, making lookups easy and enforcing uniqueness.
    match /districtAdmins/{districtId} {
        allow read;
        // Only allow creating a document here if the user is the one being assigned in the document.
        // The transaction in the admin panel will ensure this is created along with the admin document.
        allow create: if request.auth.uid == request.resource.data.adminId;
        allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    // Districts list can be read by anyone
    match /districts/{districtId} {
        allow read;
        allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    // Fallback rule for other collections (e.g., issues)
    // Define rules for your other collections here.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
