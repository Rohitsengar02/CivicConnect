
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for super admin role
    function isSuperAdmin() {
      // Check if the user's document exists in 'admins' and their role is 'superadmin'
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'superadmin';
    }

    match /admins/{adminId} {
      // Super admin can read and write to the entire collection.
      // Other authenticated users can read any single admin document.
      allow read, write: if isSuperAdmin();
      allow get: if request.auth != null;
    }

    match /districtAdmins/{districtId} {
      allow get; // Allow checking if a district admin exists
      // Allow a new admin to create their own district mapping document
      allow create: if request.resource.data.adminId == request.auth.uid;
    }

    // Rules for issues collections
    match /issues/{issueId} {
      allow read, write: if request.auth != null; // Simplistic rule, might need refinement
    }

    match /anonymousIssues/{issueId} {
      allow read;
      allow create; // Anyone can create
      allow update: if request.auth != null; // Only auth users can update (e.g., vote)

      match /votes/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    match /profiledIssues/{issueId} {
      allow read;
      allow create: if request.auth.uid == request.resource.data.reporterId;
      allow update: if request.auth != null;

       match /votes/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Rules for user-specific data
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      
      match /savedIssues/{issueId} {
         allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
      
      match /notifications/{notificationId} {
        // Any authenticated user can create a notification for another user (for votes/updates)
        allow create: if request.auth != null;
        // But only the user themselves can read/update/delete their own notifications
        allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }
  }
}
