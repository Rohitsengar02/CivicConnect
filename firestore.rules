
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Admins can be read by any authenticated user, but only created/updated under strict rules.
    match /admins/{adminId} {
      allow read: if request.auth != null;
      // Allow creation only if status is 'pending' and the district isn't already taken.
      allow create: if request.resource.data.status == 'pending' 
                    && !exists(/databases/$(database)/documents/districtAdmins/$(request.resource.data.state + '-' + request.resource.data.district));
      // Allow admins to update their own profiles, or superadmin to update any.
      // Superadmin role is checked on the client, so for rules, we check if the user is authenticated.
      // A more secure rule would be to have a 'role' field and check for 'superadmin'.
      allow update: if request.auth != null; 
      allow delete: if false; // Generally, don't allow deletion of admin records.
    }

    // This collection ensures district uniqueness.
    match /districtAdmins/{districtId} {
      allow read: if request.auth != null;
      // Can only be created if the adminId matches the authenticated user.
      allow create: if request.resource.data.adminId == request.auth.uid;
      allow write: if request.auth != null;
    }

    // Fallback rule to deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
