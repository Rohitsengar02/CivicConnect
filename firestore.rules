rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSuperAdmin() {
      return request.auth != null && request.auth.uid == "SUPER_ADMIN_UID"; // Replace with actual Super Admin UID
    }

    function isAdmin() {
      // Check if the user is in the 'admins' collection and is approved
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid))
             && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.status == 'approved';
    }

    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;

      match /savedIssues/{issueId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /notifications/{notificationId} {
        allow read: if request.auth != null && request.auth.uid == userId;
      }
    }

    match /admins/{adminId} {
      allow read, update: if isSuperAdmin();
      allow create: if request.auth != null; // Allows new admin applications
    }
    
    match /districtAdmins/{districtId} {
       allow read, create: if isSuperAdmin() || request.auth != null; // Allow creation for registration check
       allow update, delete: if isSuperAdmin();
    }

    match /{collection}/{issueId} {
      allow read: if true;
      allow create: if request.auth != null;
       // Allow logged-in users to update the 'votes' field only
      allow update: if request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['votes']);
      
      match /votes/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    match /issues/{issueId} {
       allow read: if true;
       allow create: if true; // allow anonymous and authenticated
       allow update: if isAdmin(); // Only admins can update status etc.
    }
  }
}
