rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSuperAdmin() {
      return request.auth.uid == "SUPER_ADMIN_UID"; // Replace with actual Super Admin UID from env var
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.status == 'approved';
    }

    // User data rules
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      
      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read, update, delete: if request.auth != null && request.auth.uid == userId;
        // Allow any authenticated user to create a notification for another user
        allow create: if request.auth != null;
      }
      
      // Saved issues subcollection
      match /savedIssues/{issueId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Admin management rules (Super Admin only)
    match /admins/{adminId} {
      allow read: if isSuperAdmin();
      allow update: if isSuperAdmin(); // Specifically for changing status
      // allow create, delete: if isSuperAdmin(); // Add if needed
    }
    
    match /districtAdmins/{districtId} {
       allow read, create: if request.auth != null; // Allow admins to register their district
       allow write: if isSuperAdmin();
    }

    // Issue collections rules
    match /anonymousIssues/{issueId} {
      allow read: if true;
      allow create: if true;
      allow update: if request.auth != null && request.resource.data.diff(request.resource.data).affectedKeys().hasOnly(['votes']); // Allow only vote updates
      allow delete: if false;

      match /votes/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    match /profiledIssues/{issueId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update(data): if request.auth != null && 
                             (request.resource.data.reporterId == request.auth.uid || data.diff(request.resource.data).affectedKeys().hasOnly(['votes']));
      allow delete: if request.auth != null && request.resource.data.reporterId == request.auth.uid;

      match /votes/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    match /issues/{issueId} {
      allow read: if true;
      allow create: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}
